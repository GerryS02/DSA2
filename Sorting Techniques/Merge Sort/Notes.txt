Quick Notes

How it works:

 1. Divide and Conquer: Recursively divide the array into two halves until each subarray 
    has only one element.
 2. Merge: Merge the smaller sorted subarrays back together in the correct order.
 3. Merging Process: Compare elements of the two subarrays and place the smaller element 
    into the result array. Repeat until all elements are merged.
 4. Recursive Structure: The algorithm works by repeatedly splitting the array and then 
    merging them back in sorted order.

Time Complexity:
 1. Best Case: O(n log n) (even if the array is already sorted, the merge step still 
    requires O(n) comparisons).
 2. Average Case: O(n log n) (splitting and merging process dominates).
 3. Worst Case: O(n log n) (worst case is the same as average, because splitting always 
    happens logarithmically).

Space Complexity:
 1. O(n) (requires additional space to store temporary arrays during the merge process).

When to Use:

 1. Merge Sort is very efficient for large datasets (O(n log n)).
 2. Merge Sort is stable, meaning that it maintains the relative order of 
    equal elements.
 3. Suitable for external storage (like sorting data that doesnâ€™t fit 
    in memory, e.g., files).

When Not to Use:

 1. For small arrays, simpler algorithms like Bubble Sort or Insertion Sort might be 
 faster due to lower overhead.
 2. Merge Sort requires additional space proportional to the input size (O(n)), so it 
 may not be ideal for memory-constrained environments.
